#include <torch/torch.h>
#include <torch/script.h>
#include "mat_mul.h"
#include <iostream>
#include "kernel.h"
#include <algorithm>
#include <iomanip>
#include <random>

namespace sparse_transformers {
namespace layers {
namespace kernels {
void generate_array(float* data, int len){
    for(int i=0;i<len;i++){
        data[i] = i%10000;
    }
}

//检查结果是否正确
template<class type>
bool check_value(type* A,type *B, int len_a, int len_b){
    if(len_a != len_b){
        return false;
    }
    std::cout<<setiosflags(std::ios::fixed);
    for(int i=0;i<len_a;i++){
        if(abs(A[i]-B[i])>1e-4){
            std::cout<<std::setprecision(2)<<i<<" "<<A[i]<<" "<<B[i]<<" "<<abs(A[i]-B[i])<<std::endl;
            return false;
        }
        // return false;
    }
    return true;
}

void print_tensor(float* data,int len1, int len2){
    for(int i=0;i<len1;i++){
        for(int j=0;j<len2;j++){
            std::cout<<data[i*len1+j]<<" ";
        }
        std::cout<<std::endl;
    }
}


void generate_select_index_v1(int block_num,int head_num,int select_len, std::vector<int> &select_array, std::vector<int> array){
    for(int i=0;i<block_num*head_num;i++){
        std::shuffle(array.begin(),array.end(),std::mt19937{ std::random_device{}()});
        std::vector<int> temp(array.begin(),array.begin()+select_len);
        select_array.insert(select_array.end(),temp.begin(),temp.end());
    }
}

void generate_select_index(int block_num,int head_num,int select_len, std::vector<std::vector<int>> &select_array, std::vector<int> array){
    for(int i=0;i<block_num;i++){
        for(int j =0;j<head_num;j++){
            std::shuffle(array.begin(),array.end(),std::mt19937{ std::random_device{}()});
            std::vector<int> temp(array.begin(),array.begin()+select_len);
            select_array.push_back(temp);
        }
    }
}


void select_K_and_V(int block_num,int head_size,std::vector<std::vector<int>> select_array, torch::Tensor k, torch::Tensor v, torch::Tensor& out_k, torch::Tensor& out_v){
    for(int i=0;i<block_num;i++){
        for(int j=0;j<head_size;j++){
            auto temp = k.index_select(0,torch::from_blob(select_array[i*head_size+j].data(),{11},torch::kInt32)).index_select(1,torch::tensor({j})).squeeze(1);
            out_k = torch::cat({out_k,temp},0);
            auto temp1 = v.index_select(0,torch::from_blob(select_array[i*head_size+j].data(),{11},torch::kInt32)).index_select(1,torch::tensor({j})).squeeze(1);
            out_v = torch::cat({out_v,temp1},0);
        }
    }
    return ;
}

void test_gemm(){
    int seq_len = 4096, d_num = 768;
    torch::Tensor query = torch::zeros({seq_len,d_num},torch::kFloat);
    torch::Tensor key =torch::zeros({seq_len,d_num},torch::kFloat);
    torch::Tensor value =torch::zeros({seq_len,d_num},torch::kFloat);
    torch::Tensor out = torch::zeros({seq_len,d_num},torch::kFloat).to(at::kCUDA);

    generate_array(reinterpret_cast<float*>(query.data_ptr()),seq_len*d_num);
    generate_array(reinterpret_cast<float*>(key.data_ptr()),seq_len*d_num);
    generate_array(reinterpret_cast<float*>(value.data_ptr()),seq_len*d_num);


    int block_size = 64,head_num =12;
    int block_num = seq_len/block_size;
    int head_size = d_num / head_num;

    // for(int i =0;i<128;i++){
    //     std::cout<<reinterpret_cast<float*>(query.data_ptr())[i]<<" ";
    // }
    // std::cout<<std::endl;


    // query = query.view({block_num,block_size,head_num,d_num/head_num});
    // query = query.permute({2,0,1,3}).contiguous();

    // for(int i =0;i<128;i++){
    //     std::cout<<reinterpret_cast<float*>(query.data_ptr())[i]<<" ";
    // }
    // std::cout<<std::endl;


    query = query.reshape({block_num,head_num,block_size,d_num/head_num}).to(at::kCUDA);
    key = key.reshape({block_num,head_num,block_size,d_num/head_num}).to(at::kCUDA);
    value = value.reshape({block_num,head_num,block_size,d_num/head_num}).to(at::kCUDA);
    
    std::vector<int> ivec(block_num);
    std::iota(ivec.begin(), ivec.end(), 0);
    int select_len = 11;
    std::vector<int> select_index1 = {};

    auto opts = torch::TensorOptions().dtype(torch::kInt);

    auto select_index_tensor = torch::from_blob(select_index1.data(),{block_num,head_num,select_len},at::TensorOptions().dtype(torch::kInt)).clone().to(at::kCUDA);
    // std::cout<<select_index_tensor<<std::endl;

    test_gemm_(reinterpret_cast<float*>(query.transpose(-2,-1).contiguous().data_ptr()),reinterpret_cast<float*>(key.data_ptr()),reinterpret_cast<float*>(value.data_ptr()),reinterpret_cast<float*>(out.data_ptr()),reinterpret_cast<int*>(select_index_tensor.data_ptr()),block_num,head_num,block_size,head_size);

    std::vector<std::vector<int>> select_index;
    generate_select_index(block_num,head_num,select_len,select_index,ivec);
    for(int i=0;i<64*12;i++)
        for(int j=0;j<11;j++){
            select_index[i][j] = select_index1[i*11+j];
        }

    torch::Tensor k_out = torch::zeros({0,query.sizes()[2],query.sizes()[3]}).to(at::kCPU);
    torch::Tensor v_out = torch::zeros({0,query.sizes()[2],query.sizes()[3]}).to(at::kCPU);
    // std::cout<<k_out.sizes()<<" "<<v_out.sizes()<<std::endl;

    
    // std::cout<<select_index.size()<<std::endl;
    select_K_and_V(block_num,head_num,select_index,key.to(at::kCPU),value.to(at::kCPU),k_out,v_out);
    // std::cout<<k_out.sizes()<<" "<<v_out.sizes()<<std::endl;
    k_out = k_out.reshape({block_num,head_num,-1,d_num/head_num}).to(at::kCUDA);
    v_out = v_out.reshape({block_num,head_num,-1,d_num/head_num}).to(at::kCUDA);
    // std::cout<<k_out.sizes()<<" "<<v_out.sizes()<<std::endl;
    

    // auto q = ;
    query = query.to(at::kCUDA);

    torch::Tensor out1 = torch::bmm(query.reshape({block_num*head_num,block_size,d_num/head_num}),k_out.reshape({block_num*head_num,-1,block_size}).transpose(-2,-1));
    // std::cout<<out1.index({torch::indexing::Slice(241, 242),torch::indexing::Slice(0, 1)})<<std::endl;
    // std::cout<<query.reshape({block_num*head_num,block_size,d_num/head_num}).index({torch::indexing::Slice(0, 1),torch::indexing::Slice(0, 1),"..."})<<std::endl;
    // std::cout<<k_out.reshape({block_num*head_num,-1,block_size}).transpose(-2,-1).index({torch::indexing::Slice(0, 1),"...",torch::indexing::Slice(0, 1)})<<std::endl;


    auto max_value = std::get<0>(torch::max(out1,-1)).unsqueeze(-1);
    // std::cout<<max_value.index({torch::indexing::Slice(0, 1),"...",torch::indexing::Slice(0, 1)})<<std::endl;

    // std::cout<<max_value.sizes()<<std::endl;
    // // // std::cout<<max_value<<std::endl;
    // std::cout<<out1.index({torch::indexing::Slice(718, 719),torch::indexing::Slice(0, 1),"..."})<<std::endl;
    // std::cout<<out1[718][0][0]<<std::endl;
    auto attn_weights = torch::exp(out1 - max_value);
    // // auto attn_weights = torch::exp(out1 - max_value);

    auto sum_weight = attn_weights.sum(-1);
    // std::cout<<sum_weight.unsqueeze(-1).sizes()<<std::endl;
    // std::cout<<attn_weights.sizes()<<" "<<v_out.sizes()<<std::endl;

    torch::Tensor out2 = torch::bmm(attn_weights,v_out.reshape({block_num*head_num,-1,d_num/head_num}));
    std::cout<<sum_weight.index({torch::indexing::Slice(0, 1),"..."})<<std::endl;
    std::cout<<out2[0][0][0]<<" "<<sum_weight[0][0]<<std::endl;

    out2 = out2/sum_weight.unsqueeze(-1);
    // std::cout<<out2.sizes()<<std::endl;
    // std::cout<<out2[0][8]<<std::endl;
    // std::cout<<sum_weight[0]<<std::endl;
    // out2 = out2/sum_weight.unsqueeze(1);
    // std::cout<<out1.index({torch::indexing::Slice(0, 1),"..."})<<std::endl;
    // std::cout<<key.index({"...",torch::indexing::Slice(128,129)})<<std::endl;
    // std::cout<<out2.index({torch::indexing::Slice(0, 64),torch::indexing::Slice(0, 64)})<<std::endl;
    // print_tensor(reinterpret_cast<float*>(out2.to(at::kCPU).data_ptr()),64,64);
    // std::cout<<out1.index({torch::indexing::Slice(0, 1),torch::indexing::Slice(0, 1)})<<std::endl;

    // std::cout<<out[0][0]<<" "<<out<<std::endl;

    
    std::cout<<"The result is "<<check_value<float>(reinterpret_cast<float*>(out.to(at::kCPU).data_ptr()),reinterpret_cast<float*>(out2.to(at::kCPU).data_ptr()),out.numel(),out2.numel())<<std::endl;

}


void test_add_bias_and_transpose_(){
    int seq_len = 4096, d_num = 768;
    torch::Tensor input_data = torch::zeros({seq_len,d_num*3},torch::kFloat);
    torch::Tensor key =torch::zeros({seq_len,d_num},torch::kFloat).to(at::kCUDA);
    torch::Tensor value =torch::zeros({seq_len,d_num},torch::kFloat).to(at::kCUDA);
    torch::Tensor query =torch::zeros({seq_len,d_num},torch::kFloat).to(at::kCUDA);
    torch::Tensor bias = torch::zeros({d_num*3},torch::kFloat);

    generate_array(reinterpret_cast<float*>(input_data.data_ptr()),seq_len*d_num*3);
    generate_array(reinterpret_cast<float*>(bias.data_ptr()),3*d_num);

    int block_size = 64,head_num =12;
    int block_num = seq_len/block_size;
    int head_size = d_num / head_num;

    test_add_bias_and_transpose(reinterpret_cast<float*>(bias.to(at::kCUDA).data_ptr()),reinterpret_cast<float*>(input_data.to(at::kCUDA).data_ptr()),reinterpret_cast<float*>(query.data_ptr()),reinterpret_cast<float*>(key.data_ptr()),reinterpret_cast<float*>(value.data_ptr()),0,d_num,d_num*2,1,4096,12,64,64,64);

    input_data = input_data + bias;


    query = query.reshape({head_num,block_num,block_size,d_num/head_num});
    key = key.reshape({head_num,block_num,block_size,d_num/head_num});
    value = value.reshape({head_num,block_num,block_size,d_num/head_num});

    auto query_1 = input_data.index({"...",torch::indexing::Slice(0, d_num)}).reshape({block_num,block_size,head_num,head_size}).permute({2,0,1,3}).transpose(-2,-1).contiguous();
    auto key_1 = input_data.index({"...",torch::indexing::Slice(d_num, d_num*2)}).reshape({block_num,block_size,head_num,head_size}).permute({2,0,1,3}).contiguous();
    auto value_1 = input_data.index({"...",torch::indexing::Slice(d_num*2, d_num*3)}).reshape({block_num,block_size,head_num,head_size}).permute({2,0,1,3}).contiguous();

    std::cout<<"The result is "<<check_value<float>(reinterpret_cast<float*>(query_1.to(at::kCPU).data_ptr()),reinterpret_cast<float*>(query.to(at::kCPU).data_ptr()),key_1.numel(),key.numel())<<std::endl;

}

void test_add_bias_and_layernorm_(){
    int seq_len = 4096, d_num = 768;
    torch::Tensor input_data =torch::zeros({seq_len,d_num},torch::kFloat);
    torch::Tensor out_data =torch::zeros({seq_len,d_num},torch::kFloat).to(torch::kCUDA);
    torch::Tensor bias = torch::zeros({d_num},torch::kFloat);
    torch::Tensor layernorm_weight = torch::ones({d_num},torch::kFloat).to(torch::kCUDA);
    torch::Tensor layernorm_bias = torch::zeros({d_num},torch::kFloat).to(torch::kCUDA);

    generate_array(reinterpret_cast<float*>(input_data.data_ptr()),seq_len*d_num);
    generate_array(reinterpret_cast<float*>(bias.data_ptr()),d_num);
    

    input_data = input_data.to(torch::kCUDA);
    bias = bias.to(torch::kCUDA);

    test_add_bias_and_layernorm(reinterpret_cast<float*>(out_data.data_ptr()),reinterpret_cast<float*>(input_data.data_ptr()),reinterpret_cast<float*>(bias.data_ptr()),4096,2,768,float(1e-5),reinterpret_cast<float*>(layernorm_weight.data_ptr()),reinterpret_cast<float*>(layernorm_bias.data_ptr()));

    input_data += bias;
    torch::nn::LayerNorm model(torch::nn::LayerNormOptions({768}).elementwise_affine(false).eps(1e-5));
    input_data = model(input_data);

    
    std::cout.flags(std::ios::fixed);
    std::cout.precision(6);
    float a = 1.1f;
    // std::cout<<a<<std::endl;
    
    std::cout<<reinterpret_cast<float*>(torch::mean(input_data.to(at::kCPU),1).data_ptr())[0]<<" "<<reinterpret_cast<float*>(torch::mean(input_data.to(at::kCPU),1).data_ptr())[1]<<" "<<reinterpret_cast<float*>(torch::var(input_data.to(at::kCPU)[0],false).data_ptr())[0]<<" "<<reinterpret_cast<float*>(torch::var(input_data.to(at::kCPU)[1], false).data_ptr())[0]<<" "<<std::endl;

    // std::cout<<out_data<<std::endl;
    
    std::cout<<"The result is "<<check_value<float>(reinterpret_cast<float*>(input_data.to(at::kCPU).data_ptr()),reinterpret_cast<float*>(out_data.to(at::kCPU).data_ptr()),input_data.numel(),out_data.numel())<<std::endl;

}

void test_mat_mul(){
    int seq_len = 4096, d_num = 768;
    torch::Tensor A =torch::zeros({seq_len,d_num},torch::kFloat);
    torch::Tensor B =torch::zeros({d_num,3*d_num},torch::kFloat);
    torch::Tensor out_data =torch::zeros({seq_len,3*d_num},torch::kFloat).to(torch::kCUDA);
    generate_array(reinterpret_cast<float*>(A.data_ptr()),seq_len*d_num);
    generate_array(reinterpret_cast<float*>(B.data_ptr()),d_num);

    A = A.to(torch::kCUDA);
    B = B.to(torch::kCUDA);

    sparse_transformers::layers::kernels::MatMul(A,false,B,false,1,out_data,0);

    auto out2 = torch::matmul(A,B);

    std::cout<<"The result is "<<check_value<float>(reinterpret_cast<float*>(out_data.to(at::kCPU).data_ptr()),reinterpret_cast<float*>(out_data.to(at::kCPU).data_ptr()),out2.numel(),out_data.numel())<<std::endl;
}

int main()
{
    test_mat_mul();
    return 0;
}
}
}
}